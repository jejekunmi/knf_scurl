#!/usr/bin/python

import sys, os, urlparse
from datetime import datetime, timedelta

test_id = 0
num_pass = 0

URLs = [ 
(1, 'https://www.stanford.edu/',                ['cipher', 'basic', 'pinnedcert']), \
(2, 'https://expired.badssl.com/',              ['cipher', 'basic', 'pinnedcert']), \
(3, 'https://wrong.host.badssl.com/',           ['basic']), \
(4, 'https://self-signed.badssl.com/',          ['basic']), \
(5, 'https://untrusted-root.badssl.com/',       ['basic']), \
(6, 'https://revoked.badssl.com/',              ['basic']), \
(7, 'https://incomplete-chain.badssl.com/',     ['basic']), \
(8, 'https://sha256.badssl.com/',               ['basic']), \
(9, 'https://1000-sans.badssl.com/',            ['basic']), \
(10, 'https://10000-sans.badssl.com/',          ['basic']), \
(11, 'https://ecc256.badssl.com/',              ['basic']), \
(12, 'https://ecc384.badssl.com/',              ['basic']), \
(13, 'https://rsa8192.badssl.com/',             ['basic']), \
(14, 'https://mixed-script.badssl.com/',        ['basic']), \
(15, 'https://very.badssl.com/',                ['basic']), \
(16, 'https://mixed.badssl.com/',               ['basic']), \
(17, 'https://mixed-favicon.badssl.com/',       ['basic']), \
(18, 'https://mixed-favicon.badssl.com/',       ['basic']), \
(19, 'http://http-password.badssl.com/',        ['https']), \
(20, 'http://http-login.badssl.com/',           ['https']), \
(21, 'http://http-dynamic-login.badssl.com/',   ['https']), \
(22, 'http://http-credit-card.badssl.com/',     ['https']), \
(23, 'https://cbc.badssl.com/',                 ['basic']), \
(24, 'https://rc4-md5.badssl.com/',             ['basic']), \
(25, 'https://rc4.badssl.com/',                 ['basic']), \
(25, 'https://3des.badssl.com/',                ['basic']), \
(26, 'https://null.badssl.com/',                ['basic']), \
(27, 'https://mozilla-old.badssl.com/',         ['basic']), \
(28, 'https://mozilla-intermediate.badssl.com/',['basic']), \
(29, 'https://mozilla-modern.badssl.com/',      ['basic']), \
(30, 'https://dh480.badssl.com/',               ['basic']), \
(31, 'https://dh512.badssl.com/',               ['basic']), \
(32, 'https://dh1024.badssl.com/',              ['basic']), \
(33, 'https://dh2048.badssl.com/',              ['basic']), \
(34, 'https://dh-small-subgroup.badssl.com/',   ['basic']), \
(35, 'https://pinning-test.badssl.com/',        ['pinnedcert']), \
(36, 'https://www.apple.com',                   ['pinnedcert']), \
(37, 'https://www.facebook.com',                ['pinnedcert']), \
(38, 'https://www.gmail.com',                   ['pinnedcert']), \
(39, 'https://revoked.grc.com/',                ['pinnedcert'])
]



ciphersText = "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:SRP-DSS-AES-256-CBC-SHA:SRP-RSA-AES-256-CBC-SHA:SRP-AES-256-CBC-SHA:DHE-DSS-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA256:DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:DHE-RSA-CAMELLIA256-SHA:DHE-DSS-CAMELLIA256-SHA:ECDH-RSA-AES256-GCM-SHA384:ECDH-ECDSA-AES256-GCM-SHA384:ECDH-RSA-AES256-SHA384:ECDH-ECDSA-AES256-SHA384:ECDH-RSA-AES256-SHA:ECDH-ECDSA-AES256-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:CAMELLIA256-SHA:PSK-AES256-CBC-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:SRP-DSS-3DES-EDE-CBC-SHA:SRP-RSA-3DES-EDE-CBC-SHA:SRP-3DES-EDE-CBC-SHA:EDH-RSA-DES-CBC3-SHA:EDH-DSS-DES-CBC3-SHA:ECDH-RSA-DES-CBC3-SHA:ECDH-ECDSA-DES-CBC3-SHA:DES-CBC3-SHA:PSK-3DES-EDE-CBC-SHA:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:SRP-DSS-AES-128-CBC-SHA:SRP-RSA-AES-128-CBC-SHA:SRP-AES-128-CBC-SHA:DHE-DSS-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-DSS-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA:DHE-RSA-SEED-SHA:DHE-DSS-SEED-SHA:DHE-RSA-CAMELLIA128-SHA:DHE-DSS-CAMELLIA128-SHA:ECDH-RSA-AES128-GCM-SHA256:ECDH-ECDSA-AES128-GCM-SHA256:ECDH-RSA-AES128-SHA256:ECDH-ECDSA-AES128-SHA256:ECDH-RSA-AES128-SHA:ECDH-ECDSA-AES128-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:SEED-SHA:CAMELLIA128-SHA:PSK-AES128-CBC-SHA:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:RC4-SHA:RC4-MD5:PSK-RC4-SHA:EDH-RSA-DES-CBC-SHA:EDH-DSS-DES-CBC-SHA:DES-CBC-SHA"
ciphers = ciphersText.split(":")


SSL_methods = ['', '--tlsv1.0', '--tlsv1.1', '--tlsv1.2', '--sslv3', '-3']


def did_command_pass(command):
    return not bool((os.system(command)) >> 8)

def basic_test(url):
    global test_id
    global num_pass
    for method in SSL_methods:
        args = method + ' ' + url
        actual_file = './out/actual_' + str(test_id)
        expected_file = './out/expected_' + str(test_id)

        os.system('rm -rf ' + actual_file)
        os.system('rm -rf ' + expected_file)

        actually_passed = did_command_pass('./scurl ' + args + ' &> ' + actual_file)
        expected_to_pass = did_command_pass('./curl -s ' + args + ' &> ' + expected_file)

        if expected_to_pass and actually_passed:
            if did_command_pass('diff ' + actual_file + ' ' + expected_file + ' &> /dev/null'):
                os.system('rm -rf ' + actual_file)
                os.system('rm -rf ' + expected_file)
                print 'Test', test_id, ': GREAT', expected_to_pass
                num_pass += 1
            else:
                print 'Test', test_id, ': DIFF: ' + args            
        elif expected_to_pass and not actually_passed:
            print 'Test', test_id, ': Failed when should have passed: ' + args 
        elif not expected_to_pass and actually_passed:
            print 'Test', test_id, ': Passed when should have failed: ' + args 
        elif not expected_to_pass and not actually_passed:
            os.system('rm -rf ' + actual_file)
            os.system('rm -rf ' + expected_file)
            print 'Test', test_id, ': GREAT', expected_to_pass
            num_pass += 1

        test_id += 1

def cipher_test(url):
    global test_id
    global num_pass
    for method in SSL_methods:
        for cipher in ciphers:
            args = method + ' ' + '--ciphers' + ' ' + cipher + ' '+ url
            actual_file = './out/actual_' + str(test_id)
            expected_file = './out/expected_' + str(test_id)

            os.system('rm -rf ' + actual_file)
            os.system('rm -rf ' + expected_file)

            actually_passed = did_command_pass('./scurl ' + args + ' &> ' + actual_file)
            # print('./scurl ' + args + ' &> ' + actual_file)
            expected_to_pass = did_command_pass('./curl -s ' + args + ' &> ' + expected_file)
            # print('curl -s ' + args + ' &> ' + expected_file)

            if expected_to_pass and actually_passed:
                if did_command_pass('diff ' + actual_file + ' ' + expected_file + ' &> /dev/null'):
                    os.system('rm -rf ' + actual_file)
                    os.system('rm -rf ' + expected_file)
                    print 'Test', test_id, ': GREAT', expected_to_pass
                    num_pass += 1
                else:
                    print 'Test', test_id, ': DIFF: ' + args            
            elif expected_to_pass and not actually_passed:
                print 'Test', test_id, ': Failed when should have passed: ' + args 
            elif not expected_to_pass and actually_passed:
                print 'Test', test_id, ': Passed when should have failed: ' + args 
            elif not expected_to_pass and not actually_passed:
                os.system('rm -rf ' + actual_file)
                os.system('rm -rf ' + expected_file)
                print 'Test', test_id, ': GREAT', expected_to_pass
                num_pass += 1

            test_id += 1

def https_test(url):
    global test_id
    global num_pass
    for method in SSL_methods:
        args = method + ' ' + url
        actual_file = './out/actual_' + str(test_id)
        
        os.system('rm -rf ' + actual_file)
        
        actually_passed = did_command_pass('./scurl ' + args + ' &> ' + actual_file)
        
        if actually_passed:
            print 'Test', test_id, ': Non-http worked: ' + args            
        else:
            os.system('rm -rf ' + actual_file)
            print 'Test', test_id, ': GREAT', actually_passed
            num_pass += 1

        test_id += 1

def extract_PEM(url):
    urlparsed = urlparse.urlparse(url)
    dir_path = os.path.dirname(os.path.realpath(__file__)) + "/pinnedcert/"
    command1 = "openssl s_client -servername " + urlparsed.netloc + " -connect " + urlparsed.netloc + ":443 < /dev/null | sed -n \"/-----BEGIN/,/-----END/p\" > " + dir_path + urlparsed.netloc + ".pem"
    command2 = "openssl x509 -in " + dir_path + urlparsed.netloc + ".pem -pubkey -noout > " + dir_path + urlparsed.netloc + ".pubkey.pem"

    print "****************"
    print command1
    passed = did_command_pass(command1)

    if passed:
        print "certificated retrieved"

    print "****************"
    print command2
    passed2 = did_command_pass(command2)
    if passed2:
        print "public key extracted"


def pinned_test(url):
    global test_id
    global num_pass


    urlparsed = urlparse.urlparse(url)
    url = urlparsed.netloc
    #print url, urlparsed
    
    scurl_args = "--pinnedcertificate pinnedcert/" + url + ".pem" + ' ' + urlparsed.geturl()
    curl_args = "--pinnedpubkey pinnedcert/" + url + ".pubkey.pem" + ' ' + urlparsed.geturl()

    actual_file = './out/actual_' + str(test_id)
    expected_file = './out/expected_' + str(test_id)

    os.system('rm -rf ' + actual_file)
    os.system('rm -rf ' + expected_file)

    actually_passed = did_command_pass('./scurl ' + scurl_args + ' &> ' + actual_file)
    #print('./scurl ' + scurl_args + ' &> ' + actual_file)
    expected_to_pass = did_command_pass('./curl -s ' + curl_args + ' &> ' + expected_file)
    #print('curl ' + curl_args + ' &> ' + expected_file)

    if expected_to_pass and actually_passed:
        if did_command_pass('diff ' + actual_file + ' ' + expected_file + ' &> /dev/null'):
            os.system('rm -rf ' + actual_file)
            os.system('rm -rf ' + expected_file)
            print 'Test', test_id, ': GREAT', expected_to_pass
            num_pass += 1
        else:
            print 'Test', test_id, ': DIFF: ' + url            
    elif expected_to_pass and not actually_passed:
        print 'Test', test_id, ': Failed when should have passed: ' + url 
    elif not expected_to_pass and actually_passed:
        print 'Test', test_id, ': Passed when should have failed: ' + url 
    elif not expected_to_pass and not actually_passed:
        os.system('rm -rf ' + actual_file)
        os.system('rm -rf ' + expected_file)
        print 'Test', test_id, ': GREAT', expected_to_pass
        num_pass += 1

    test_id += 1

print 'Start time', str(datetime.now())
print 'Running tests on ', len(URLs), 'URLs'

# for url_tuple in URLs:
#     uid, url, url_tests = url_tuple

#     # if 'basic' in url_tests:
#     #     #basic_test(url)
#     # if 'https' in url_tests:
#     #     #https_test(url)
#     if 'pinnedcert' in url_tests:
#         extract_PEM(url)

for url_tuple in URLs:
    uid, url, url_tests = url_tuple

    # if 'basic' in url_tests:
    #     basic_test(url)
    # if 'https' in url_tests:
    #     https_test(url)
    if 'cipher' in  url_tests:
        cipher_test(url)
    # if 'pinnedcert' in url_tests:
    #     pinned_test(url)
    
print 'End time', str(datetime.now())
print 'Results:', num_pass, '/', test_id