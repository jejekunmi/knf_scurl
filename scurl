#!/usr/bin/python

import argparse, sys, os, urlparse, socket
from OpenSSL import SSL


SSL_methods = {'--tlsv1.0': SSL.TLSv1_METHOD, '--tlsv1.1': SSL.TLSv1_1_METHOD, \
               '--tlsv1.2': SSL.TLSv1_2_METHOD, '--sslv3': SSL.SSLv3_METHOD, \
               '-3': SSL.SSLv3_METHOD}

# Fei's version

class Params():
    def __init__(self):
        self.ssl_method = '--tlsv1.2'
        self.ciphers = ''
        self.crl_file = ''
        self.cacert = ''
        self.allow_stale_certs = 0
        self.pinnedcertificate = ''
        self.parse_args()

    def print_vals(self):
        print '\n'.join("%s: %s" % item for item in vars(self).items())

    def parse_args(self):
        args = sys.argv[1:]
        # print args

        # No arguments
        if not args:
            sys.exit('Usage: scurl [options...] [URL...]')

        # Get URL
        self.url = urlparse.urlparse(args.pop())
        if self.url.scheme != 'https':
            sys.exit('Invalid URL')

        try:
            while len(args) > 0:
                a = args.pop(0)

                if a in SSL_methods:              # --tlsv1.0, --tlsv1.1, --tlsv1.2, --sslv3, -3
                    self.ssl_method = a
                elif a == '--ciphers':            # --ciphers
                    self.ciphers = args.pop(0)
                elif a == '--crlfile':            # --crlfile
                    self.crl_file = args.pop(0)
                elif a == '--cacert':             # --cacert
                    self.cacert = args.pop(0)
                elif a == '--allow-stale-certs':  # --allow-stale-certs
                    try:
                        self.allow_stale_certs = int(args.pop(0))
                        if self.allow-stale-certs < 0:
                            sys.exit('Invalid --allow-stale-certs') 
                    except ValueError:
                        sys.exit('Invalid --allow-stale-certs') 
                elif a == '--pinnedcertificate':  # --pinnedcertificate
                    self.pinnedcertificate = arg.pop(0)
                else:
                    sys.exit('Invalid argument')
        except Exception as e:
            sys.exit('Invalid call')

def verify(connection, certificate, err_num, err_depth, ret_code):
        # TODO: Verify certificate
        # print 'Certificate: ', certificate.get_subject()
        # print ret_code
        return True

class Scurl():
    def __init__(self, params):
        self.connection = None
        self.context = None
        self.url = params.url
        self.init_context(params)

    def init_context(self, params):
        self.context = SSL.Context(SSL_methods[params.ssl_method])
        # self.context.set_verify(SSL.VERIFY_NONE, verify)
        # TODO: Process other args

    def init_connection(self):
        try:
            self.connection = SSL.Connection(self.context, socket.socket())
            self.connection.connect((self.url.hostname, self.url.port if self.url.port else 443))            
            self.connection.set_connect_state()
            self.connection.set_tlsext_host_name(self.url.hostname)
            # self.connection.do_handshake()
        except Exception as e:
            sys.exit('Could not connect')

    def end_connection(self):
        self.connection.close()

    def get_data(self):
        httpRequest = 'GET ' + (self.url.path if self.url.path else '/') + ' HTTP/1.1\r\n' + \
                      'HOST: ' + self.url.hostname + '\r\n' + \
                      'User-Agent: scurl/1.0\r\n' + \
                      'Connection: close\r\n\r\n'
        print httpRequest

        try:
            self.connection.send(httpRequest)
            self.recv_and_out(self.connection)
        except SSL.Error:
            sys.exit('Connection problems')

    def recv_and_out(self, connection):
        print connection
        httpResponse = []
        buf_size = 4096
        # data = connection.recv(buf_size)
        # httpResponse.append(data)
        while True:
            # data = connection.recv(buf_size)
            # if not data:
            #     break
            # print data
            # httpResponse.append(data)
            try:
                data = connection.recv(buf_size)
                httpResponse.append(data)
                
                # if len(data) == 0:
                #     break
                # print len(data)
                # print data
            except SSL.Error:
                break
                # sys.exit('Error while receiving data')

        # print 'HERE'
        # Output message without header
        httpResponse = ''.join(httpResponse)
        sys.stdout.write(httpResponse[4 + httpResponse.find('\r\n\r\n'):])
        sys.stdout.flush()

def main():    
    params = Params()
    params.print_vals()

    scurl = Scurl(params)
    scurl.init_connection()
    scurl.get_data()
    scurl.end_connection()

if __name__ == '__main__':
    main()
