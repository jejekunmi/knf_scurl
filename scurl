#!/usr/bin/python

import argparse, sys, os, urlparse, socket, datetime, re
from datetime import datetime, timedelta
from OpenSSL import SSL
from OpenSSL import crypto

# Global constants
SSL_methods = {'--tlsv1.0': SSL.TLSv1_METHOD, '--tlsv1.1': SSL.TLSv1_1_METHOD, \
               '--tlsv1.2': SSL.TLSv1_2_METHOD, '--sslv3': SSL.SSLv3_METHOD, \
               '-3': SSL.SSLv3_METHOD}
X509_V_ERR_CERT_HAS_EXPIRED = 10

# Global Scurl object
scurl = None

class Params():
    ###########################################
    # Parameter class: parse relevant arguments
    ###########################################
    def __init__(self):
        self.ssl_method = '--tlsv1.2'
        self.ciphers = None
        self.crl_file = None
        self.cacert = None
        self.allow_stale_certs = 0
        self.pinned_certificate = None
        self.parse_args()

    def print_vals(self):
        print '\n'.join("%s: %s" % item for item in vars(self).items())

    def parse_args(self):
        args = sys.argv[1:]
        
        # No arguments
        if not args:
            sys.exit('Usage: scurl [options...] [URL...]')

        # Get URL
        self.url = urlparse.urlparse(args.pop())
        if self.url.scheme != 'https':
            sys.exit('Invalid URL')

        try:
            while len(args) > 0:
                a = args.pop(0)

                if a in SSL_methods:              # --tlsv1.0, --tlsv1.1, --tlsv1.2, --sslv3, -3
                    self.ssl_method = a
                elif a == '--ciphers':            # --ciphers
                    self.ciphers = args.pop(0)
                elif a == '--crlfile':            # --crlfile
                    self.crl_file = args.pop(0)
                elif a == '--cacert':             # --cacert
                    self.cacert = args.pop(0)
                elif a == '--allow-stale-certs':  # --allow-stale-certs
                    try: # Make sure integer greater than 0
                        self.allow_stale_certs = int(args.pop(0))
                        if self.allow_stale_certs < 0:
                            sys.exit('Invalid --allow-stale-certs') 
                    except ValueError:
                        sys.exit('Invalid --allow-stale-certs') 
                elif a == '--pinnedcertificate':  # --pinnedcertificate
                    self.pinned_certificate = args.pop(0)
                else:
                    sys.exit('Invalid argument')
        except Exception as e:
            sys.exit('Invalid call')


class Verifier():
    #############################################################################
    # Verifier class: implement cerification verification for root and leaf nodes
    #############################################################################
    @staticmethod
    def verify_certificate(connection, certificate, err_num, err_depth, ret_code):
        # If pinned certificate is specified, do separate verification later
        if scurl.pinned_certificate:
            return True

        # Verify that certificate has not been revoked
        if scurl.revoked_list and certificate.get_serial_number() in scurl.revoked_list:
            return False

        # Verify that it isn't passed allowed stale days
        if err_num == X509_V_ERR_CERT_HAS_EXPIRED:
            return Verifier.not_too_stale(certificate)

        return ret_code

    @staticmethod
    def not_too_stale(certificate):
        expiration_time = datetime.strptime(certificate.get_notAfter(), '%Y%m%d%H%M%SZ')
        return (datetime.now() - expiration_time).days <= scurl.num_stale_days

    @staticmethod
    def verify_server_certificate():
        server_certificate = scurl.connection.get_peer_certificate()

        # Verify pinned certificate matches server certificate
        if scurl.pinned_certificate and \
           (scurl.pinned_certificate.digest(b"sha256") != server_certificate.digest(b"sha256")):
            sys.exit('Pinned certificate mismatch')

        # Check if server certificate has right hostname identifier and check for alternative names
        for i in range(server_certificate.get_extension_count()):
            extension = server_certificate.get_extension(i)
            if extension.get_short_name() == "subjectAltName":
                candidate_names = extension.__str__().replace('DNS:', '').replace(' ', '').split(',')
                for name in candidate_names:
                    if Verifier.match_hostname(scurl.url.hostname, name):
                        return

        # Get common names based on : http://blog.san-ss.com.ar/2012/05/validating-ssl-certificate-in-python.html
        common_name = server_certificate.get_subject().commonName.decode()
        if Verifier.match_hostname(scurl.url.hostname, common_name):
            return

        # Did not match hostname
        sys.exit('Certificate hostname mismatch')

    # Implement Server Name Indication using ( https://tools.ietf.org/html/rfc6125#page-27)
    # Section: 6.4.3
    @staticmethod
    def match_hostname(hostname, candidate_hostname):
        wildcard_position = candidate_hostname.rfind('*') # Last '*'
        first_dot_position = candidate_hostname.find('.') # First '.'
        a_label_position = candidate_hostname.find('xn--') # First 'xn--'

        # Don't match identifier if wildcard after first dot
        if wildcard_position > first_dot_position:
            return False

        # No wildcard matching needed
        if wildcard_position == -1:
            return hostname == candidate_hostname

        # Don't match wildcard for A-label or U-label of an internationalized domain name
        if a_label_position > -1 and wildcard_position > a_label_position:
            return False

        # Wildcard matching
        pattern = candidate_hostname.replace('.', r'\.').replace('*',r'[^\.]*')
        return bool(re.match(pattern, hostname))


class Scurl():
    #############################################################################
    # Scurl class: main class implementing all curl-inspired options
    #############################################################################
    def __init__(self, params):
        self.connection = None
        self.context = None
        self.url = params.url
        self.revoked_list = None
        self.num_stale_days = 0
        self.pinned_certificate = None
        self.init_context(params)

    def init_context(self, params):
        # SSL Method
        try:
            self.context = SSL.Context(SSL_methods[params.ssl_method]) 
            
            # Server must provide certificate that will be verified
            self.context.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT, Verifier.verify_certificate)
                
        except Exception as e:
            sys.exit('Method failure')

        # Set ciphers if specified 
        if params.ciphers:
            try:
                self.context.set_cipher_list(params.ciphers)
            except Exception as e:
                sys.exit('Cipher list failure')

        # If specified, extract list of serials from CRL file
        if not params.pinned_certificate and params.crl_file:
            try:
                with open(params.crl_file) as f:
                    buffer = f.read()
                    crl = crypto.load_crl(crypto.FILETYPE_PEM, buffer)
                    self.revoked_list = set([long(c.get_serial(), 16) for c in crl.get_revoked()]) 
            except Exception as e:
                sys.exit('CRL file failure')

        # Use specified CA cert if specified, else use defaults
        try:
            if not params.pinned_certificate and params.cacert:
                self.context.load_verify_locations(params.cacert)
            else: 
                self.context.set_default_verify_paths()
        except Exception as e:
            sys.exit('CA cert failure')

        # Set number of stale days to allow
        self.num_stale_days = params.allow_stale_certs

        # Load pinned certificate if specified
        if params.pinned_certificate:
            try:
                with open(params.pinned_certificate) as f:
                    buffer = f.read()
                    self.pinned_certificate = crypto.load_certificate(crypto.FILETYPE_PEM, buffer)
            except Exception as e:
                sys.exit('Pinned certificate failure')

    def init_connection(self):
        try:
            self.connection = SSL.Connection(self.context, socket.socket())
            self.connection.connect((self.url.hostname, self.url.port if self.url.port else 443))            
            self.connection.set_connect_state()
            self.connection.set_tlsext_host_name(self.url.hostname)
        except Exception as e:
            sys.exit('Could not connect')

        try:
            self.connection.do_handshake()
            
            # Check pinned certificate if specified and verify hostname match
            Verifier.verify_server_certificate()
        except Exception as e:
            sys.exit('Verification failure')

    def end_connection(self):
        self.connection.close()

    def get_data(self):
        httpRequest = 'GET ' + (self.url.path if self.url.path else '/') + ' HTTP/1.0\r\n' + \
                      'HOST: ' + self.url.hostname + '\r\n' + \
                      'User-Agent: scurl/1.0\r\n' + \
                      'Connection: close\r\n\r\n'
        
        try:
            self.connection.sendall(httpRequest)
            self.recv_and_out(self.connection)
        except Exception as e:
            sys.exit('Connection problems')

    def recv_and_out(self, connection):
        httpResponse = []
        buf_size = 4096
        while True:
            try:
                data = connection.recv(buf_size)
                httpResponse.append(data)
            except SSL.ZeroReturnError:
                break
            except Exception as e:
                # sys.exit('Error while receiving data')
                break

        # Output message without header
        httpResponse = ''.join(httpResponse)
        sys.stdout.write(httpResponse[4 + httpResponse.find('\r\n\r\n'):])
        sys.stdout.flush()

    def print_vals(self):
        print '\n'.join("%s: %s" % item for item in vars(self).items())

def main():    
    params = Params()

    global scurl
    scurl = Scurl(params)
    scurl.init_connection()
    scurl.get_data()
    scurl.end_connection()

if __name__ == '__main__':
    main()